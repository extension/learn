<p>
   <%= event_form.text_field :title, :size => nil, :class => "title" %>
   <span class="help-block">If you make your title 80 characters or less, it can be easily texted</span>
</p>

<fieldset id="presenters">
  <p>
    <%= event_form.label :presenter_tokens, "Presenters" %>
    <%= event_form.text_field :presenter_tokens, "data-pre" => @event.presenter_tokens_tokeninput.to_json  %>
  </p>
 </fieldset>
 
 <fieldset id="description">
    <p>
       <%= event_form.label :description, 'Description' %>
       <%= event_form.text_area :description, {:rows => "7", :class => "wysihtml5"} %>
    </p>
 </fieldset>
 
 <fieldset id="description">
 <ul class="thumbnails">
   <%= event_form.fields_for :images, @event.images do |images_field| %>
       <% if images_field.object.new_record? %>
       <li id="<%= images_field.object_name.gsub(/[^0-9]+/,'') %>" class="span4">
         <%= images_field.label :file, "Image:" %>
         <%= images_field.file_field :file %>
       </li>
       <% else %>
       <li id="<%= images_field.object_name.gsub(/[^0-9]+/,'') %>" class="span2">
         <div class="thumbnail">
           <%= image_tag(images_field.object.file.url(:largethumb)) %>
           <div class="caption">
             <%= images_field.check_box :_destroy %>
             <%= images_field.label(:_destroy, "Delete image", :class => "checkbox inline") %>
           </div>
         </div>
       </li>
       <% end %>
       <% end %>
     </ul>
 </fieldset>
   
 <fieldset id="datetime">
   <p>
   <%= event_form.label :session_start, 'Date and Time' %>
   <%= event_form.text_field :session_start_string, {id: 'session_start', :size => nil} %>
   </p>
   
   <p>
   <%= event_form.label :time_zone, 'Time Zone' %>
   <%= event_form.time_zone_select :time_zone, ActiveSupport::TimeZone.us_zones, {:default => @event.time_zone}, {:class => "span5"} %>
   </p>
   
 </fieldset>
   
 <fieldset id="session_length">
   <p>
   <%= event_form.label :session_length, 'Duration (in minutes)' %>
   <%=  event_form.text_field :session_length, :class => "xs" %>
   </p>
 </fieldset>
 
 <fieldset>
 <p>

    <%= event_form.label :location, 'Event Location (e.g., http://connect.extension.iastate.edu/learn)' %>
    <%= event_form.text_field :location, :class => "xxl" %>
    <span class="help-block">Please make sure the hosting venue is available before scheduling your event.</span>
    </label>
 </p>
 
 <!-- TODO: use the session_start/session_end settings above to determine whether this is shown. -->
 <% if @event.concluded? %>
   <p>
      <%= event_form.label :recording, 'Recording URL' %>
      <%= event_form.text_field :recording, :class => "xxl" %>
   </p>
 <% end %>
 
 </fieldset>
 
 
 <div id="tag_interface">

   <div id="tag_picker_wrapper">
     <div class="ui-widget">
       <label for="tag_picker">Add Tags</label>
   	  <input id="tag_picker" placeholder="Type a word and select it..." />
     </div>
   </div>

 
   <div id="tag_list">
   <% if @event.tags.size > 0 %>
     <% @event.tags.each do |tag| %>
       <p id="tag_<%= tag.id %>">
         <span class="tag tag-topic"><%= link_to tag.name, events_tag_path(tag.name) %></span> 

         <span class="btn removetag">x</span>

       </p>
     <% end %>
   <% end %>
   </div>
 </div>

 <fieldset>
   <p>
     <%= event_form.label :evaluation_link, 'Participant evaluation URL (optional)' %>
     <%= event_form.text_field :evaluation_link, :class => "xxl" %>
     <span class="help-block">Displays once the event has concluded</span>
   </p>
 </fieldset>

<fieldset>
  <div class="material-links-wrapper">
    <p><%= link_to_add_association 'Add support materials', event_form, :material_links, { form_name: 'event_form', 'data-association-insertion-method' => 'after', :class => "btn" } %><p>
     
    <%= event_form.fields_for :material_links do |material_link| %>
      <%= render 'material_link_fields', event_form: material_link %>  
    <% end %>
  </div>
</fieldset>
 
 <!-- While an event is going on, you can neither cancel it nor expire it -->
 <!-- Admins can cancel and expire events anytime -->
 <% if (!@event.new_record? && !@event.started?) || (current_learner.is_admin && !@event.new_record?) %>
   <fieldset>
      <p class="clearing">
        <label>
        <%= event_form.check_box :is_canceled %>
        Cancel this Event
        <span class="help-block">The event page is still viewable. A "Canceled" banner is displayed on the page, and an email is sent to people who followed the event. Please update the "description" field explaining why the event was canceled. The event will eventually be removed from the site.</span>
        </label>
      </p>
   </fieldset>
 <% end %>
  
 <% if (!@event.new_record? && @event.concluded?) || (current_learner.is_admin && !@event.new_record?) %>
   <fieldset>
     <p class="clearing">
       <label>
       <%= event_form.check_box :is_expired %>
       Expire this Event
       <span class="help-block">Use this option when an event is out-of-date or the technical recording is poor. A prominent "expired" banner is displayed on the page, and the event is removed from our recommendation engine. Please update the "description" field explaining why, and include a link to a better session if available.</span>
       </label>
     </p>
     
  </fieldset>
<% end %>

<p>
  <%= submit_tag 'Save Session', :class => "btn btn-primary btn-large" %>
  <%- if @event.id %>
    <%= link_to("cancel", event_path(@event.id), :class => "cancel") -%>
  <%- else -%>
    <%= link_to("cancel", root_path(), :class => "cancel") -%>
  <%- end -%>
</p>
 
 <script class="code" type="text/javascript">
   $('#session_start').datetimepicker({
    dateFormat: 'yy-mm-dd',
   	ampm: true
   });
   
   $(function () {
     $('#event_presenter_tokens').tokenInput('<%= token_search_learners_path %>', { 
       crossDomain: false,
       prePopulate: $('#event_presenter_tokens').data('pre'),
       theme: 'facebook' 
     });
   });



 		function add_tag(tag) {
 		  $.ajax({
         type: "POST",
         url: "<%= add_tag_event_path(:id => @event.id) %>",
         cache: false,
         data: {tag: tag}
       })
       .done(function() {
 				$("#tag_picker").autocomplete("close");
 				$("#tag_picker").val('');
 				return false;
       })  
       .fail(function() {
         alert("error");
         $("#tag_picker").autocomplete("close");
   			$("#tag_picker").val('');
   			return false;
       })
 		}

     // create an instance of autocomplete plus a hack for using the 'enter' key instead of direct selection
     $(document).ready(function(){

         $("#tag_picker").autocomplete({
           source: "/ajax/tags",
     			minLength: 2,
     			select: function(e, ui) {
     			  add_tag(ui.item.name);
     			}
     		}).keypress(function(e) {
           if (e.keyCode === 13) {
             if ($.trim(this.value) != "") {
               add_tag(this.value);
             } else {
               $("#tag_picker").val('');
       				return false;
             }
           }
         }).data( "autocomplete" )._renderItem = function( ul, item ) {
           return $( "<li></li>" )
           .data( "item.autocomplete", item )
           .append( "<a>"+ item.label + " <strong>(" + item.tag_count + ")</strong></a>" )
           .appendTo( ul );
         };

     });

     // remove tags
      $("#tag_list").on("click", ".removetag", function(){
        var tag = $(this).closest("p");
        $.ajax({
          type: "POST",
            url: "<%= remove_tag_event_path(:id => @event.id) %>",
            cache: false,
            data: {tag_id: tag.attr("id").replace('tag_', '')}
        })
        .done(function() {
          tag.fadeOut(500);
        })
      });

 </script>