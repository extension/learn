<div class="span12">
  <h1>Learn Widgets</h1>

  <h2>There are two widgets available</h2>

  <div class="span5">
    <h2>Build a Custom Widget</h2>
    <p>Display a list of answered questions by group, location or tag</p>
    <div class="well">
      <%= form_tag( {}, {:id => "widget_form"}) do %>
        <%= hidden_field_tag 'widget_key', @widget_key %>
        <p><label>Number of events: <%= text_field_tag :limit, @limit, :size => 3, :class => "" %></label></p>
        <p><label>Width (pixels): <%= text_field_tag :width, @width, :size => 3, :class => "" %></label> (leave blank for auto/100%)</p>

        <div id="county_selector"></div>
        <label>Tags </label>
        <div class="formy">
          <div class="ui-widget">
            <input id="tag_picker" class="form-control text-input-large" placeholder="Type and select a tag..." />
          </div>
        </div>
        <div class="form-group">
          <p><%= text_field_tag :tags, @tags, :class => "form-control" %></p>
        </div>

        <p style="display:none;">operator <%= text_field_tag :operator, @operator, :size => 3, :class => "" %></label></p>

        <p><span id="submit-widget" class="btn btn-primary btn-large">Generate Widget</span></p>
      <% end %>
    </div>
  </div>

  <div class="span5">
    <div id="example-widget">
      <h3>Example Widget</h3>
      <%= render(:partial => 'example_widget') %>
    </div>
  </div>

</div>


<div class="span12">



<h3>Widget behavior and styling</h3>
<p>By default, five events are returned. This can be changed with the limit parameter (i.e. limit=3)</p>
<p>If upcoming events aren't available, the widget defaults to most recent. If a tag is not defined, the widget defaults to events tagged "front page".</p>

<p>The widget markup contains css hooks to make it easier to hide or display different sections including:</p>
<ul>
  <li>.learn_widget_generic_title</li>
  <li>.learn_widget_specific_title</li>
  <li>.learn_widget_no_matches</li>
  <li>.learn_widget_see_more</li>
</ul>

<p>The examples above have been wrapped in a div.widget-container and are styled with the following css:</p>
<pre>
  .widget-container {background:#fff; padding:10px; width:220px;}
  .learn_widget_specific_title {line-height: 24px; font-size:21px;}
</pre>
</div>




<script class="code" type="text/javascript">

  $("#submit-widget").click(function() {
    generate_widget();
  });

  $("#widget_form").keypress(function(e) {
    if (e.keyCode === 13) {
      generate_widget();
    }
  });

  function generate_widget() {
    $.ajax({
      type: "POST",
      url: "<%= widgets_events_path() %>",
      cache: false,
      data: $("#widget_form").serialize()
    })
    .done(function(data) {

      // generate_widget_snippet();
      $(".example-widget-container").hide().fadeIn();
    })
    .fail(function() {
      alert("problem generating widget");
    })
  }

  function generate_widget_snippet() {
    widgetKey = $("#learn-widget-hook").attr("data-widget-key");
    widgetParams = $("#learn-widget-hook").attr("data-widget-params");
    $.ajax({
      type: "POST",
      url: "<%= widgets_generate_widget_path() %>",
      data: {widget_key: widgetKey, widget_params: widgetParams},
      cache: false
    })
    .done(function(data) {
    })
    .fail(function() {
      alert("problem generating widget snippet");
    })
  }


  $(window).bind("load", function() {
    generate_widget();
  });

// create an instance of autocomplete plus a hack for using the 'enter' key instead of direct selection
var doTags = {
  onReady: function() {
    $("#tag_picker").autocomplete({
      source: "/ajax/tags",
      minLength: 2,
      select: function(e, ui) {
        add_tag(ui.item.name);
        $("#tag_picker").val('');
        return false;
      }
    }).keypress(function(e) {
      if (e.keyCode === 13) {
        if ($.trim(this.value) != "") {
          add_tag(this.value);
        } else {
          $("#tag_picker").val('');
          return false;
        }
      }
    }).data( "autocomplete" )._renderItem = function( ul, item ) {
      return $( "<li></li>" )
      .data( "item.autocomplete", item )
      .append( "<a>"+ item.label + " <strong>(" + item.tag_count + ")</strong></a>" )
      .appendTo( ul );
    };
  }
};

$( document ).ready( doTags.onReady );

function add_tag(tag) {
  if( !$("#tags").val() ) {
    $("#tags").val(tag);
  } else {
    $("#tags").val( $("#tags").val() + ", " + tag);
  }
}

</script>
